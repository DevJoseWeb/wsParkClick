/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.gov.ce.saude.ponto.servico.relatorio;

import br.gov.ce.autenticacao.service.AbstractFacade;
import br.gov.ce.saude.autenticacao.exception.ServiceException;
import br.gov.ce.saude.ponto.entidade.Ocorrencia;
import br.gov.ce.saude.ponto.servico.BatidaRelFacadeREST;
import br.gov.ce.saude.ponto.vo.PaginacaoVO;
import br.gov.ce.saude.ponto.vo.RelatorioOcorrenciasVO;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import static javax.ejb.TransactionAttributeType.NOT_SUPPORTED;
import javax.persistence.Query;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

/**
 *
 * @author joao
 */
@Stateless
@Path("naobatemponto")
public class RelatorioNaoBatemPontoFacadeREST extends AbstractFacade<Ocorrencia, ServiceException> {

    public RelatorioNaoBatemPontoFacadeREST() {
        super(Ocorrencia.class);
    }

    private Date ultimoDiaMesAtual(String mes, String ano) {
        SimpleDateFormat sdf = new SimpleDateFormat("MM/yyyy");

        Calendar cal = GregorianCalendar.getInstance();
        try {
            if (mes.length() == 1) {
                mes = "0" + mes;
            }
            cal.setTime(sdf.parse(mes + "/" + ano));
        } catch (ParseException ex) {
            Logger.getLogger(BatidaRelFacadeREST.class.getName()).log(Level.SEVERE, null, ex);
        }

        int dia = 28;
        if (sdf.format(new Date()).equals(mes + "/" + ano)) {
            Calendar calAtual = Calendar.getInstance();
            calAtual.setTime(new Date());
            dia = calAtual.get(Calendar.DAY_OF_MONTH);
        } else {
            dia = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        }

        String data = ano + "-" + mes + "-" + dia;

        SimpleDateFormat sdfData = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return sdfData.parse(data);
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioNaoBatemPontoFacadeREST.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private Date primeiroDiaMes(String mes, String ano) {
        String data = ano + "-" + mes + "-01";
        SimpleDateFormat sdfData = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return sdfData.parse(data);
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioNaoBatemPontoFacadeREST.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    /**
     * Lista pessoas que nao batem ponto por hierarquia
     *
     * @param mes
     * @param ano
     * @param idPessoa
     * @param start
     * @param length
     * @param nome
     * @param draw
     * @return
     */
    @TransactionAttribute(NOT_SUPPORTED)
    @GET
    @Path("{idPessoa}/{mes}/{ano}")
    @Produces({"application/json"})
    public PaginacaoVO listaOcorrenciasPorNome(@PathParam("mes") String mes,
            @PathParam("ano") String ano,
            @PathParam("idPessoa") BigInteger idPessoa,
            @QueryParam("idUnidade") BigInteger idUnidade,
            @QueryParam("start") int start, @QueryParam("length") int length,
            @QueryParam("search[value]") String nome, @QueryParam("draw") int draw) {

        PaginacaoVO paginacaoVO = new PaginacaoVO();
        List<RelatorioOcorrenciasVO> data = null; // Somente os dados que serão mostrados

        Query query = null;
        Query queryTodosRegistros = null;

        String consulta = "\n"
                + "select matricula, \n"
                + "(select nome from e_base.t_pessoa where pessoa_pk = pessoa_fk) as nome,\n"
                + "(select sigla from e_base.t_organograma where organograma_pk = unidade_funcional_fk) as setor,\n"
                + "(select sigla from e_base.t_organograma where organograma_pk = unidade_organica_fk) as unidade,\n"
                + "(select descricao from e_pontows.t_vinculo where vinculo_pk = vinculo_fk) as vinculo\n"
                + "from\n"
                + "(select matricula, pessoa_fk, unidade_funcional_fk, unidade_organica_fk, vinculo_fk\n"
                + "from e_pontows.t_funcionario_contrato\n"
                + "where funcionario_contrato_pk not in (select funcionario_contrato_fk from e_pontows.t_funcionario_horario) \n"
                + "and situacao_funcional_fk =1\n"
                + "union\n"
                + "select matricula, pessoa_fk, unidade_funcional_fk, unidade_organica_fk , vinculo_fk\n"
                + "from e_pontows.t_funcionario_contrato, e_pontows.t_funcionario_horario\n"
                + "where funcionario_contrato_pk = funcionario_contrato_fk \n"
                + "and situacao_funcional_fk =1 and\n"
                + "funcionario_horario_pk not in (select funcionario_horario_fk \n"
                + "	                         from e_pontows.t_batida\n"
                + "                                 where CAST(data_batida AS date) between :primeiroDia and :ultimoDia)\n"
                + "and funcionario_contrato_pk not in (select funcionario_contrato_fk\n"
                + "                                      from e_pontows.t_afastamento\n"
                + "                                      where data_inicial <= :ultimoDia\n"
                + "                                         and coalesce(data_final, :ultimoDia) - data_inicial >= CAST(:ultimoDia AS date) - CAST(:primeiroDia AS date)\n"
                + "                                         and coalesce(data_final, :ultimoDia) >=:primeiroDia)) nb\n"
                + "WHERE 1=1 \n"
                + "AND ((:idUnidade is null) OR (unidade_organica_fk = :idUnidade))\n";

        // Verifica se o usuario é Geral   :primeiroDia  and  :ultimoDia
        String consultaGlobal = "select count(*) from Hierarquia h \n"
                + " where h.tipo = 'G' and \n"
                + " h.funcionarioContrato.funcionarioFk.id = :pessoa ";

        Query query1 = getEntityManager().createQuery(consultaGlobal);
        query1.setParameter("pessoa", idPessoa);
        Long qtdGlobal = (Long) query1.getSingleResult();

        if (qtdGlobal.intValue() == 0) {
            // Inclui as unidades que o usuario tem acesso
            consulta += " AND unidade_organica_fk IN ("
                    + "(SELECT \n"
                    + "  t_unidade_organica_item.organograma_fk\n"
                    + "FROM \n"
                    + "  e_pontows.t_unidade_organica, \n"
                    + "  e_pontows.t_unidade_organica_item, \n"
                    + "  e_pontows.t_hierarquia, \n"
                    + "  e_pontows.t_funcionario_contrato\n"
                    + "WHERE \n"
                    + "  t_unidade_organica.unidade_organica_pk = t_unidade_organica_item.unidade_organica_fk AND\n"
                    + "  t_hierarquia.organograma_fk = t_unidade_organica.organograma_fk AND\n"
                    + "  t_hierarquia.funcionario_contrato_fk = t_funcionario_contrato.funcionario_contrato_pk AND\n"
                    + "  t_funcionario_contrato.pessoa_fk = :idPessoa AND t_hierarquia.tipo='U')\n"
                    + "union\n"
                    + "  (SELECT \n"
                    + "  t_hierarquia.organograma_fk\n"
                    + "FROM \n"
                    + "  e_pontows.t_hierarquia, \n"
                    + "  e_pontows.t_funcionario_contrato\n"
                    + "WHERE \n"
                    + "  t_hierarquia.funcionario_contrato_fk = t_funcionario_contrato.funcionario_contrato_pk AND\n"
                    + "  t_funcionario_contrato.pessoa_fk = :idPessoa AND \n"
                    + "  t_hierarquia.tipo = 'S')"
                    + ")";
        }

        consulta += "ORDER BY 4,nome,3,5";

        query = getEntityManager().createNativeQuery(consulta, "relatorioPessoasNaoBatem");
        query.setParameter("primeiroDia", primeiroDiaMes(mes, ano));
        query.setParameter("ultimoDia", ultimoDiaMesAtual(mes, ano));
        query.setParameter("idUnidade", idUnidade);

        if (qtdGlobal.intValue() == 0) {
            query.setParameter("idPessoa", idPessoa);
        }

        queryTodosRegistros = getEntityManager().createNativeQuery("SELECT COUNT(*) FROM ( " + consulta + " ) Q");
        queryTodosRegistros.setParameter("primeiroDia", primeiroDiaMes(mes, ano));
        queryTodosRegistros.setParameter("ultimoDia", ultimoDiaMesAtual(mes, ano));
        queryTodosRegistros.setParameter("idUnidade", idUnidade);

        if (nome != null && nome.length()>0) {
            nome = nome.toUpperCase();
        }
        query.setParameter("primeiroDia", primeiroDiaMes(mes, ano));
        query.setParameter("ultimoDia", ultimoDiaMesAtual(mes, ano));

        if (qtdGlobal.intValue() == 0) {
            query.setParameter("idPessoa", idPessoa);
            queryTodosRegistros.setParameter("idPessoa", idPessoa);
        }

        query.setMaxResults(length);
        query.setFirstResult(start);

        data = query.getResultList();
        BigInteger filtrados = (BigInteger) queryTodosRegistros.getSingleResult();

        paginacaoVO.setDraw(draw++);
        paginacaoVO.setRecordsTotal(filtrados.intValue()); //paginacaoVO.setRecordsTotal(recordsTotal.size());
        paginacaoVO.setRecordsFiltered(filtrados.intValue()); //paginacaoVO.setRecordsFiltered(recordsFiltered.size());
        paginacaoVO.setData(data);

        return paginacaoVO;
    }

}
