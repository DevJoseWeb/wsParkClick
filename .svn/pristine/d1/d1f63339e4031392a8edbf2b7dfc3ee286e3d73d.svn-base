/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.gov.ce.saude.ponto.servico.relatorio;

import br.gov.ce.autenticacao.service.AbstractFacade;
import br.gov.ce.saude.autenticacao.exception.ServiceException;
import br.gov.ce.saude.ponto.entidade.BatidaRel;
import br.gov.ce.saude.ponto.vo.HorasTrabalhadaVO;
import br.gov.ce.saude.ponto.vo.PaginacaoVO;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import static javax.ejb.TransactionAttributeType.NOT_SUPPORTED;
import javax.persistence.Query;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;

/**
 *
 * @author esmayktillesse
 */
@Stateless
@Path("horatrabalhada")
public class RelatorioHoraTrabalhadaFacadeREST extends AbstractFacade<BatidaRel, ServiceException> {

    public RelatorioHoraTrabalhadaFacadeREST() {
        super(BatidaRel.class);
    }

    @TransactionAttribute(NOT_SUPPORTED)
    @GET
    @Path("acompanhamento/{funcional}/{dia}/{mes}/{ano}")
    @Produces({"application/json"})
    public PaginacaoVO horasTrabalhada(@PathParam("funcional") BigInteger funcional,
            @PathParam("dia") String dia, @PathParam("mes") String mes,
            @PathParam("ano") String ano,
            @QueryParam("empresa") BigInteger empresa, @QueryParam("funcao") BigInteger funcao,
            @QueryParam("start") int start, @QueryParam("length") int length,
            @QueryParam("search[value]") String nome, @QueryParam("draw") int draw) throws ParseException {

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String dt = dia + "/" + mes + "/" + ano;
        Date date = sdf.parse(dt);
        PaginacaoVO paginacaoVO = new PaginacaoVO();
        Query queryTodosRegistros = null;

        String consulta = "SELECT 	p.nome,\n"
                + "	t_funcao.descricao funcao,\n"
                + "	t_organograma.sigla AS setor,\n"
                + "	TO_CHAR(batida_1, 'dd-MM-yyyy') AS data,\n"
                + "     (SELECT EXTRACT( DOW FROM batida_1)+1) dia_semana,\n"
                + "     h.descricao as horario,\n"
                + "	batida_1, \n"
                + "	batida_2, \n"
                + "	\n"
                + "	CASE  WHEN (SELECT EXTRACT( DOW FROM batida_1)+1) IN (1,7) THEN 'FDS'\n"
                + "              ELSE 'SEMANA'\n"
                + "        END AS tipo_plantao,\n"
                + "	\n"
                + "	CASE  WHEN (horas_batida >= horas_cumprir)\n"
                + "	          THEN horas_cumprir\n"
                + "	      WHEN horas_batida IS NULL \n"
                + "	          THEN '00:00:00'\n"
                + "	      ELSE horas_batida\n"
                + "	END AS hora,\n"
                + "	\n"
                + "	CASE  WHEN TO_CHAR(batida_1,  'HH24:mm:ss') < '19:00:00' \n"
                + "                  THEN 'DIURNO'\n"
                + "              WHEN TO_CHAR(batida_1,  'HH24:mm:ss') >= '19:00:00' \n"
                + "                  THEN 'NOTURNO'\n"
                + "              ELSE 'AUSENTE'\n"
                + "        END AS plantao,	\n"
                + "	horas_cumprir,\n"
                + "	horas_batida\n"
                + "  FROM t_batida_rel_escala e\n"
                + "  LEFT JOIN t_escala_item ei ON (escala_item_fk = escala_item_pk),\n"
                + "       t_funcionario_horario fh,\n"
                + "       t_funcionario_contrato fc\n"
                + "  LEFT JOIN t_funcao ON (funcao_fk = funcao_pk),\n"
                + "       e_base.t_pessoa p\n"
                + "  LEFT JOIN e_base.t_empresa ON (empresa_fk = empresa_pk),\n"
                + "       t_horario h,\n"
                + "       e_base.t_organograma\n"
                + "       \n"
                + "  WHERE \n"
                + "	funcionario_horario_fk = funcionario_horario_pk AND\n"
                + "	t_organograma.organograma_pk = fc.unidade_funcional_fk AND\n"
                + "	funcionario_contrato_fk = funcionario_contrato_pk AND\n"
                + "        fc.pessoa_fk = p.pessoa_pk AND\n"
                + "        fh.horario_fk = h.horario_pk AND\n"
                + "        t_funcao.funcao_pk = :funcao OR :funcao IS NULL AND\n"
                + "        t_empresa.empresa_pk  = :empresa OR :empresa IS NULL AND\n"
                + "        fc.unidade_organica_fk = :funcional OR  AND\n" 
                + "	   batida_1 = :date";

        if (nome != null && !nome.equals("")) {
            consulta += " AND t_pessoa.nome LIKE :nome";
        }
        if (empresa != null && !nome.equals("")) {
            consulta += " AND t_pessoa.nome LIKE :nome";
        }
        if ((funcao.compareTo(BigInteger.ZERO)!= 0)) {
            consulta += " AND (funcao_fk = :funcao)";
        } else {
            consulta += " AND (funcao_fk  IS NOT NULL)";
        }
        Query query = getEntityManager().createNativeQuery(consulta, "+");

        if (nome != null && !nome.equals("")) {
            query.setParameter("nome", "%" + nome.toUpperCase() + "%");
        }

        if (funcional != null) {
            query.setParameter("funcional", funcional);
            query.setParameter("date", date);
        }

        queryTodosRegistros = getEntityManager().createNativeQuery("SELECT COUNT(*) FROM ( " + consulta + " ) F");

        if (nome != null && !nome.equals("")) {
            queryTodosRegistros.setParameter("nome", "%" + nome.toUpperCase() + "%");
        }

        if (funcional != null) {
            queryTodosRegistros.setParameter("funcional", funcional);
            queryTodosRegistros.setParameter("date", date);
        }

        query.setMaxResults(length);
        query.setFirstResult(start);

        List<HorasTrabalhadaVO> data = query.getResultList();
        //List a = query.getResultList();

        BigInteger filtrados = (BigInteger) queryTodosRegistros.getSingleResult();

        paginacaoVO.setDraw(draw++);
        paginacaoVO.setRecordsTotal(filtrados.intValue()); //paginacaoVO.setRecordsTotal(recordsTotal.size());
        paginacaoVO.setRecordsFiltered(filtrados.intValue()); //paginacaoVO.setRecordsFiltered(recordsFiltered.size());
        paginacaoVO.setData(data);

        return paginacaoVO;
    }

}
